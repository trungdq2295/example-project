Amazon ElastiCache
	The same way RDS is to get managed Relational Database 
	ElasticCache is to get managed Redis sor Memcached 
	Caches are iin-memory DB with really high performance, low latency 
	Help reduce load off of DBs for read intensive workloads
	Help make your application stateless AWS takes care of OS maintenance/patching, optimizations, set up, configuration, monitoring, failure recovery and backups 
	Using ElastiCache involves heavy application code changes
	
	Solution Architecture  - DB Cache
		Applications queries ElastiCache, if not available, get from RDS and store in ElastiCache 
		Helps relieve load in RDS 
		Cache must have an invalidation strategy to make sure only the most current data is used in there
	Solution Architecture  - User Session stores
		User logs into any of the application 
		The application writes the session data into ElasticCache 
		THe user hits another instance of our application
		The instance retrieves the data and the user is already logged in
	ElastiCache - Redis & Memcached
		Redis
			Multi AZ with Auto-Failover 
			Read replicas to scale reads and have high availability 
			Data Durability using AOF persistence 
			Backup and restore features 
			Supports Sets and Sorted Sets
		Memcached
			Multi-node for partitioning of data (sharding)
			No HA 
			Non-persistent
			No backup and restore
			    Only serverless type has backup and restore
			Multi-threaded architecture
		
Cache Security
	ElasticCache supports IAM Authentication for Redis 
	IAM policies on ElastiCache are only used for AWS API-level security 
	Redis AUTH 
		You can set a "pw/token" when you create a Redis cluster 
		This is an extra level of security for your cache (on top of security groups) 
		Support SSL in flight encryption 
	Memcached 
		Supports SASL-based authentication
	
Patterns for ElastiCache
	Cache-Aside/Lazy Loading: all the read data is cached, data can become stale in cache
	    is easy to implement and works for many situation as a foundation, especially on the read side
	    Pros
	        Only requested data is cached( the cache isn't filled up with unused data)
	        Node failure are not fatal (just increase latency to warm the cache)
	    Cons
	        Cache miss penalty that result in 3 round trips (network), noticeable delay for that request
	        Stale data: data can be updated in the database and outdated in the cache
	Write Through: Adds or update data in the cache when written to a DB( no stale data)
	    is usually combine with Lazy loading as targeted for the queries or workloads that benefit from this optimization
	    Pros:
            Data in cache is never stale, reads are quick
            Write penalty vs read penalty - each write requires 2 calls
        Cons:
            Missing Data until it is added/ updated in the DB. Mitigation is to implement lazy loading strategy as wel
            Cache churn - a lot of the data will never be read
	Session Store: store temporary session data in a cache (using TTL features)

ElastiCache Uses cases:
	Gaming Leaderboards are computationally complex
	Redis Sorted sets guarantee both uniqueness and element ordering
	Each time a new element added, it's ranked in real time, the added in correct order