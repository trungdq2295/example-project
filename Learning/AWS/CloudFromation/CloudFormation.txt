CloudFormation
    is like a blueprint and you declare your AWS infrastructure
	is a declarative way of outlining your AWS Infrastructure, for any resource (most of them are supported)
	For example, within a Cloudformation template, you say:
		I want a security group
		I want two EC2 instances using this security group
		I want an S3  bucket
		I want a load balancer (ELB) in front of these machines
	CloudFormation creates those for you, in the right order, with the exact configuration that you specify

Benefits of AWS CloudFormation
	Infrastructure as code
		No resources are manually created, which is excellent for control
		Changes to the infrastructure are reviewed through code
	Cost
		Each resource within the stack is tagged with an identified so you can easily see how much a stack cost you
		You can estimate the costs of your resources using the CloudFormation template
		Saving strategy: In dev, you could automation deletion of templates at 5PM and recreated at 8AM safely
	
	Productivity 
		Ability to destroy and re-create an infrastructure on the cloud on the fly
		Automated generation of Diagram for your templates
		Declarative programming ( no need to figure out ordering and orchestration)
    Separation of concern:
        Create many stacks for many apps, and many layers
            VPC stacks
            Network stacks
            App stack
	Don't re-invent the wheel
		Leverage existing templates on the web
		Leverage the documentation
	Supports (almost) all AWS resources
		Everything we'll se in this course is supported
		you can use "custom resources" for resources that are not supported

How CloudFormation Works
    Templates must be uploaded in S3 and then referenced in CloudFormation
    To update a template, we can't edit previous ones. We have to re-upload a new version of the template to AWS
    Stacks are identified by a name
    Deleting a stack deletes every single artifact that was created by CloudFormation

Deploying CloudFormation Templates
    Manual way
        Editing templates in Infrastructure Composer or code editor
        Using the console to input parameters, etc...
    Automated way
        Editing templates in a YAML files
        Using the AWS CLI to deploy templates, or using a CD tool
Building Block
    Template's Components
        AWSTemplateFormatVersion - identifies the capabilities of the template "2010-09-09"
        Description - comments about the template
        Resources (MANDATORY) - your AWS resources declared in the template
        Parameters - the dynamic inputs for your template
        Mappings - the static variables for your template
        Outputs - references to what has been created
        Conditionals - list of conditions to perform resource creation
    Template's Helpers
        References
        Functions