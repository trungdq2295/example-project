Route 53 - Routing Policies
    Define how Route 53 responds to DNS queries 
    Don't get confused by the word "Routing" 
        It's not the same as Load Balancer routing which routes the traffic 
        DNS does not route any traffic, it only responds to the DNS queries
    Route 53 Supports the following Routing Policies 
        Simple 
        Weighted 
        Failover 
        Latency based 
        Geolocation 
        Multi-Value Answer 
        Geoproximity ( using Roue 53 Traffic Flow feature)

Routing Policies - Simple
    Typically, route traffic to a single resource
    Can specify multiple values in the same record
    If multiple values are returned, a random one is chosen by the client 
        Example: You set up a DNS and there's multiple value IP to route (12.23.34.56 and 23.78.34.56),
                    client will randomly access it, either 12.23.34.56 or 23.78.34.56
    When Alias enabled, specify only one AWS resource 
    Can't be associated with Health Checks
Routing Policies - Weighted
    Control the % of the requests that go to each specifi resource 
    Assign each record a relative weigh: 
        Traffic = (Weight for a specific records)/(Sum of all the weights for all records) 
        Weight don't need to sum up to 100 
    DNS records must have the same name and type 
    Can be associated with Health Checks 
    Use cases: load balancing between regions, testing new application versions (Green/Blue deploy) 
    Assign a weight of 0 to a record to stop sending traffic to a resource 
    If all records have weight of 0, then all records will be returned equally
Routing Policies - Latency-based
    Redirect to the resource that has the least latency close to use 
    Super helpful when latency for users is a priority 
    Latency is based on traffic between users and AWS Regions 
        Example: We have 2 resources, 1 in Singapore and 1 in USA and user in VN will route to resource in SG.
    Germany users may be directed to the US (if that's the lowest latency) 
    Can be associated with Health Checks ( has a failover capability)
Routing Policies - Failover
    Setup 1 primary route and 1 secondary route
    Route to secondary if primary is unhealthy
Routing Policies - Geolocation
    Different from Latency-based! 
    This routing is based on user location 
    Specify location by Continent, Country or by US State (if there's overlapping, most precise location selected)
    Should create a "Default" record ( in case there's no match on location) 
    Use cases: website localization, restrict content distribution, load balancing, ... 
    Can be associated with Health Checks
Routing Policies - Geo-proximity
    Route traffic to your resource based on the geographic location of users and resources 
    Ability to shift more traffic to resources based on the defined bias
    To change the size of the geographic region, specify bias values: 
        To expand(1 to 99) - more traffic to the resource 
        To shrink (-1 to -99) - less traffic to the resource 
    Resources can be: 
        AWS resources (specify AWS region) 
        Non-AWS resources(specify Latitude and Longitude)
    You must use Route 53 Traffic Flow (advanced) to use this feature
    It's really helpful when you need to shift traffic from one region to another by increasing bias
Routing Policies - IP-based routing
    Routing is based on client's IP addressed 
    You provide a list of CIDRS for you clients and the corresponding endpoints/locations (user-IP-to-endpoint mappings) 
    Use cases: Optimize performance, reduce network cost... 
    Example: route end users from a particular ISP to a specific endpoint
    Example 2: You create 2 CIDRS ( location-1 with 203.0.113.0/24 for EC2 instance 1 and location-2 with 200.5.4.0/4 EC2 instance 2) and user with IP 203.0.113.200 will route to instance 1 and user with IP 200.5.4.123 to instance 2
Routing Policies - Multi-Value
    Use when routing traffic to multiple resources 
    Routes 53 return multi values/resources 
    Can be associated with Health CHeck (return only values for healthy resources - Unlike Routing Policies - Simple, which can return unhealthy resource when it has multiple value, )
    Up to 8 healthy record are returned for each Mutli-Value query 
    Multi-Value is not a substitute for having ELB
    Example: The idea is when client connect to our Route 53, Route 53 will return like 8 different IP, and client will chose any of them
            => Load balancer on client side