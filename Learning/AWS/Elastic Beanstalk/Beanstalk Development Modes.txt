Beanstalk Development Modes
    All at once (deploy all in one go) - fastest, but instances aren't available to serve traffic for a bit (downtime)
    Rolling: update a few instances at a time (bucket), and then move onto the next bucket once the first bucket is healthy
    Rolling with additional batches: like rolling, but spins up new instances to move the batch ( so that the old application is still available)
    Immutable: spins up new instances in a new ASG, deploys version to these instances, and then swaps all the instances when everything is healthy
    Blue Green: create new environment and switch over when ready
    Traffic Splitting: canary testing - send a small % of traffic to a new deployment

    All at once:
        Fastest deployment
        Application has downtime
        Great for quick iterations in development environment
        No additional cost
    Rolling
        Application is running below capacity
        Can set the bucket size
        Application is running both versions simultaneously
        No additional cost
        Long deployment
    Rolling with additional batches
        Application is running at capacity
        Can set the bucket size
        Application is running both version simultaneously
        Small additional cost
        Additional batch is removed at the end of deployment
        Longer deployment
        Good for prod
        It's like deployment in K8s
    Immutable
        Zero downtime
        New code is deployed to new instances on a temporary ASG
        High cost, double capacity
        Longest deployment
        Quick rollback in case of failure (just terminate new ASG)
        Great for prod
    Blue/Green
        Not a "direct feature" of Elastic Beanstalk
        Zero downtime and release facility
        Create a new "stage" environment and deploy v2 there
        THe new environment (green) can be validated independently and roll back if issue
        Route 53 can be setup using weighted policies to redirect a little bit of traffic to stage environment
        Using Beanstalk, "swap URLs" when done with the environment test
    Traffic Splitting:
        Canary deployment
        New application version is deployed to a temporary ASG with the same capacity
        A small % of traffic is sent to the temporary ASG for a congratulate amount of time
        Deployment health is monitored
        If there's deployment failure, this triggers an automated rollback (very quick)
        No application downtime
        New instances are migrated from the temporary to the original ASG
        Old application version is then terminated
