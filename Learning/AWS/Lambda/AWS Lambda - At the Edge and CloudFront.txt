AWS Lambda - At the Edge and CloudFront
    Many modern applications execute some form of the logic at the edge
        This mean instead of sending all the to the central server/cloud to processing
        Some logic can be done locally on the edge of service such as
            Filtering or aggregating data
            Trigger an alert
            ...
    These are call Edge function
        A code that you write and attach to CloudFront distributions
        Runs close to your user to minimize latency
    CloudFront provides two types: CloudFront function & Lambda@Edge
    You don't have to manage any servers, deployed globally
    Use case: customize CDN content
    Pay only for what you use
    Fully serverless service
    Use cases:
        Website Security and Privacy
        Dynamic WEb Application at the Edge
        Search Engine Optimization (SEO)
        Intelligently Route Across Origins and Data centers
        Bot Mitigation at the Edge
        Real-time Image Transformation
        A/B Testing
        User Authentication and Authorization
        User Prioritization
        User Tracking and Analytics
    CloudFront function
        Lightweight functions written in JS
        For high-scale, latency-sensitive CDN customizations
        Sub-ms startup times, scale up to millions requests/second
        USed to change Viewer requests and response
            Viewer request: after cloudfront receives a request from a viewer. we can modify it
            Viewer response: before CloudFront forwards the response to the viewer
        Native feature of CloudFront (manage code entirely within CloudFront)
        Use cases:
            Cache key normalization
                Transform request attributes (headers, cookies, query strings, URL) to create an optimal cache key
            Header manipulation
                Insert/modify/delete HTTP headers in the request or response
            URL rewrites or redirects
            Request authentication & authorization
                Create and validate user-generated tokens (e.g. JWT) to allow/deny requests
    Lambda@Edge
        Written in NodeJs or Python
        Scales to 100s of RPS
        Used to change CloudFront request and responses
            Viewer request - after Cloudfront receives a request from a viewer
            Origin request - before Cloudfront forwards the request to the origin
            Origin Response - after CloudFront receives the response from the origin
            Viewer Response - before CloudFront forwards the response to hte viewer
        Author your functions in one AWS Region (us-east-1), then CloudFront replicates to its locations
        Use cases:
            Longer execution time (several ms)
            Adjustable CPU or memory
            Your code depends on a 3rd libraries(e.g., AWS SDK to access other AWS services)
            Network access to use external service for processing
            File system access or access to the body of HTTP requests
