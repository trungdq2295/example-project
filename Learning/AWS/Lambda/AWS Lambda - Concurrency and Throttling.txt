AWS Lambda - Concurrency and Throttling
    Concurrency limit: up to 1000 concurrent executions
    Can set a "reserved concurrency" at the function level (=limit)
        It's like you only allow it scales up to 10 functions at a time
    Each invocation over the concurrency limit will trigger a "Throttle"
    Throttle behavior:
        If synchronous invocation => return ThrottleError - 429
        if asynchronous invocations => retry automatically and then go to DLQ
    If you need a higher limit (more than 1000), open a support ticket
    Concurrency Issue
        If there's no limit concurrency, this could happens:
            If one of your functions goes over the limit, other functions can go throttle
    Concurrency and Asynchronous invocations
        IF the function doesn't have enough concurrency, available to process all events, additional requests are throttled
        For throttling errors (429) and system errors ( 500-series), Lambda returns the event to the queue and attempts to run the function again for up to 6 hours
        The retry interval increases exponentially from 1 second after the first attempt to a maximum of 5 numbers
            => keep retrying until success
    Cold starts & Provisioned Concurrency
        Cold start
            New instance usually take some time to init your lambda function
            First requests served by new instance has higher latency than the rest request
        Provisioned Concurrency
            Concurrency is allocated before the function is invoked ( in advanced)
            So the cold start never happens and all invocations have low latency
            Application Auto Scaling can manage concurrency (schedule or target utilization)
