n: is the total element
O(n)
	is to scan all the element ( you have n element => you scan n element)
O(log n) 
	Important: In computer science, log n is refer to the log n to the base 2, not to the base 10 like in mathematic
	every time you scan, you scan half of it
		1st scan: you scan n/2 element,
		2nd scan: you scan n/4 element, 
		...
	So the time you scan will be equal to the heigh of binary tree,
		=> height = n/(2^x)
		=> x = log (n) to the base 2
O(1)
    Is the operation which always remain the same no matter how big of the size is
		
Drop constant
    In some cases, we wil have like 2 loops O(n) then the time will be O(2n)
    In these cases, to simplify we can drop the constant: 0(2n) => O(n) no matter we have 2 or 10,000 lops. We can drop it

Drop Non-Dominants
    In some cases, we will have nested loop ( O(n^2) and standalone loop (On) then the time complexity will be O(n^2 +n)
    IN these cases, to simplify we can drop the non-dominants:  O(n^2 +n) => O(n^2) since n^2 will always grow larger than n even when you have the low value like n = 100